name: Automated tests # Название самого автотеста в гитхабе

on: #Это условия, которые мы задаем, какие вкладки будут в гитахабе. Будет раскрывающийся список, где мы сможем выбрать, какой вариант нам нужен.
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        default: second_test
        type: choice
        options:
          - first_test
          - second_test
          - all_tests

permissions: #Это просто нужно, что бы не было ошибки.
  contents: read
  pages: write
  id-token: write

jobs: #Так мы сохраняем и дописываем исторю алюра.
  download-history:
    # if: false
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: >
          ARTIFACT_ID=$(curl -L  #Так мы получаем ID нашего артефакта, который был сгенерен
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/Esipenok/test_git_new/actions/artifacts?name=allure-results" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/Esipenok/test_git_new/actions/artifacts/$ARTIFACT_ID/zip 
          -o artifacts.zip &&
          REPORT_ID=$(curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          "https://api.github.com/repos/Esipenok/test_git_new/actions/artifacts?name=github-pages" 
          | python -c "import sys, json; print(json.load(sys.stdin)['artifacts'][0]['id']);") 
          &&
          curl -L 
          -H "Accept: application/vnd.github+json" 
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" 
          -H "X-GitHub-Api-Version: 2022-11-28" 
          https://api.github.com/repos/Esipenok/test_git_new/actions/artifacts/$REPORT_ID/zip 
          -o pages.zip
      - run: mkdir allure-results && unzip artifacts.zip -d allure-results
      - run: mkdir old_pages pages_history && unzip pages.zip -d old_pages && tar -xvf old_pages/artifact.tar -C pages_history
      - run: cp pages_history/history/* allure-results && cp -r pages_history/history allure-results
      - name: Store allure history
        uses: actions/upload-artifact@v3
        with:
          name: allure-results
          path:
            allure-results
          retention-days: 1

  test: #Так мы создаем автотесты, с вариантами выбора.
      runs-on: ubuntu-latest
      needs: download-history #Так как в Гитхабе нельзя генерить сразу все автотесты разом в одно место, мы должны их включать по очереди. И что бы все в отчете было в одном месте, нужно добавлять отчет первого автотеста, в отчет второго автотеста и тд.
  
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4.1.6
        - name: setup Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.10"
        - name: Install Chrome
          run: sudo apt-get install google-chrome-stable
        - name: install dependencies
          run: pip3 install -r requirements.txt
        - name: first_test
          if: "github.event.inputs.deployment_target == 'first_test'"
          run: pytest tests/test_button.py::test_button_exist_1 --alluredir=allure-results
          continue-on-error: true
        - name: second_test
          if: "github.event.inputs.deployment_target == 'second_test'"
          run: pytest tests/test_button.py::test_button_exist_2 --alluredir=allure-results
          continue-on-error: true
        - name: all_tests
          if: "github.event.inputs.deployment_target == 'all_tests'"
          run: pytest --alluredir=allure-results
          continue-on-error: true
        - name: Store allure results
          uses: actions/upload-artifact@v3
          with:
            name: allure-results
            path:
              allure-results
            retention-days: 1


  generate-report: #так мы создаем репорт алюра. Устанавливаем джаву. Устанавливаем алюр. Генерим репорт и задаем ему название _site.
      runs-on: ubuntu-latest
      needs: test
      name: Generate report
      steps:
        - uses: actions/setup-java@v3
          with:
            distribution: 'microsoft' # See 'Supported distributions' for available options
            java-version: '17' #change version 23.0.1
        - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.tgz && sudo tar -zxvf allure-2.32.0.tgz -C /opt/ && sudo ln -s /opt/allure-2.32.0/bin/allure /usr/bin/allure
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3
        - run: allure generate -c allure-results -o _site
        - name: Store generated report
          uses: actions/upload-artifact@v3
          with:
            name: _site
            path:
              _site
            retention-days: 1

  publish-report: #Так мы публикуем репорт на Гитхаб, что бы можно было посмотреть его по ссылке
      runs-on: ubuntu-latest
      needs: generate-report
      name: Report publication
      steps:
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3
        - name: Upload Pages artifact
          uses: actions/upload-pages-artifact@v2
        - name: Deploy to GitHub Pages
          id: deployment
          uses: actions/deploy-pages@v1.2.9  
