name: Automated tests # Название самого автотеста в гитхабе

on: #Это условия, которые мы задаем, какие вкладки будут в гитахабе. Будет раскрывающийся список, где мы сможем выбрать, какой вариант нам нужен.
  workflow_dispatch:
    inputs:
      deployment_target:
        description: Choose target
        required: true
        default: second_test
        type: choice
        options:
          - first_test
          - second_test
          - all_tests

permissions: #Это просто нужно, что бы не было ошибки.
  contents: read
  pages: write
  id-token: write

jobs: #Так мы сохраняем и дописываем исторю алюра.
  test: #Так мы создаем автотесты, с вариантами выбора.
      runs-on: ubuntu-latest
      outputs:
        first_test: ${{ steps.first_test.outcome }}
        second_test: ${{ steps.second_test.outcome }}
        all_tests: ${{ steps.all_tests.outcome }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4.1.6
        - name: setup Python
          uses: actions/setup-python@v4
          with:
            python-version: "3.10"
        - name: Install Chrome
          run: sudo apt-get install google-chrome-stable
        - name: install dependencies
          run: pip3 install -r requirements.txt
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3
        - name: first_test
          if: "github.event.inputs.deployment_target == 'first_test'"
          run: pytest tests/test_button.py::test_button_exist_1 --alluredir=allure-results
          continue-on-error: true
        - name: second_test
          if: "github.event.inputs.deployment_target == 'second_test'"
          run: pytest tests/test_button.py::test_button_exist_2 --alluredir=allure-results
          continue-on-error: true
        - name: all_tests
          if: "github.event.inputs.deployment_target == 'all_tests'"
          run: pytest --alluredir=allure-results
          continue-on-error: true
        - name: Store allure results
          uses: actions/upload-artifact@v3
          with:
            name: allure-results
            path:
              allure-results
            retention-days: 1


  generate-report: #так мы создаем репорт алюра. Устанавливаем джаву. Устанавливаем алюр. Генерим репорт и задаем ему название _site.
      runs-on: ubuntu-latest
      needs: test
      name: Generate report
      steps:
        - uses: actions/setup-java@v3
          with:
            distribution: 'microsoft' # See 'Supported distributions' for available options
            java-version: '17' #change version 23.0.1
        - run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.tgz && sudo tar -zxvf allure-2.32.0.tgz -C /opt/ && sudo ln -s /opt/allure-2.32.0/bin/allure /usr/bin/allure
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3
        - run: allure generate -c allure-results -o _site
        - name: Store generated report
          uses: actions/upload-artifact@v3
          with:
            name: _site
            path:
              _site
            retention-days: 1

  publish-report: #Так мы публикуем репорт на Гитхаб, что бы можно было посмотреть его по ссылке
      runs-on: ubuntu-latest
      needs: generate-report
      name: Report publication
      steps:
        - name: Download all workflow run artifacts
          uses: actions/download-artifact@v3
        - name: Upload Pages artifact
          uses: actions/upload-pages-artifact@v2
        - name: Deploy to GitHub Pages
          id: deployment        
          uses: actions/github-pages-deploy-action@v4
        - name: success
          if: needs.test.outputs.first_test != 'failure' && needs.test.outputs.second_test != 'failure' && needs.test.outputs.all_tests != 'failure'
          run: |
            curl --location 'https://hooks.slack.com/services/${{ secrets.st_slack }}' --header 'Content-Type: application/json' --data '{"text": ":white_check_mark: Testing finished. Report is here: https://esipenok.github.io/test_git_new/"}'
        - name: failure
          if: needs.test.outputs.first_test == 'failure' || needs.test.outputs.second_test == 'failure' || needs.test.outputs.all_tests == 'failure'
          run: |
            curl --location 'https://hooks.slack.com/services/${{ secrets.st_slack }}' --header 'Content-Type: application/json' --data '{"text": ":rage: Testing finished. Report is here: https://esipenok.github.io/test_git_new/"}'
